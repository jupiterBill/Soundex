"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./Context/SoundexContext.js":
/*!***********************************!*\
  !*** ./Context/SoundexContext.js ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NFTMarketplaceContext\": function() { return /* binding */ NFTMarketplaceContext; },\n/* harmony export */   \"NFTMarketplaceProvider\": function() { return /* binding */ NFTMarketplaceProvider; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var web3modal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! web3modal */ \"./node_modules/web3modal/dist/index.js\");\n/* harmony import */ var web3modal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(web3modal__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants */ \"./Context/constants.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var ipfs_http_client__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ipfs-http-client */ \"./node_modules/ipfs-http-client/src/index.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\nconst projectId = \"2LBwKVDaWHWQFH0oGsMnG2d8ieM\";\nconst projectSecretKey = \"85dff23393f6b7fe42107d4b67a7ab1a\";\nconst auth = \"Basic \".concat(Buffer.from(\"\".concat(projectId, \":\").concat(projectSecretKey)).toString(\"base64\"));\nconst subdomain = \"https://soundex.infura-ipfs.io\";\nconst client = (0,ipfs_http_client__WEBPACK_IMPORTED_MODULE_5__.create)({\n    host: \"infura-ipfs.io\",\n    port: 5001,\n    protocol: \"https\",\n    apiPath: \"/api/v0\",\n    headers: {\n        authorization: auth\n    }\n});\nconst NFTMarketplaceContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createContext();\n//SMART CONTRACT INITIALIZATION\nconst fetchContract = (signerOrProvider)=>new ethers__WEBPACK_IMPORTED_MODULE_6__.ethers.Contract(_constants__WEBPACK_IMPORTED_MODULE_4__.Marketplaceaddress, _constants__WEBPACK_IMPORTED_MODULE_4__.ABI, signerOrProvider);\n//SMART CONTRACT CONNECTIVITY\nconst connectWithContract = async ()=>{\n    try {\n        const web3Modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n        const connection = await web3Modal.connect();\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_6__.ethers.providers.Web3Provider(connection);\n        const signer = provider.getSigner();\n        const contract = fetchContract(signer);\n        return contract;\n    } catch (error) {\n        console.log(\"Something went wrong while attempting to connect with smart contract --->\" + error);\n    }\n};\nconst NFTMarketplaceProvider = (param)=>{\n    let { children  } = param;\n    _s();\n    //STATE VARIABLES\n    const [currentAccount, setCurrentAccount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [openError, setOpenError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [accountBalance, setAccountBalance] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    //CHECKING IF WALLET IS CONNECTED OR NOT\n    const checkIfWalletConnected = async ()=>{\n        try {\n            if (!window.ethereum) return setOpenError(true), setError(\"Install MetaMask\");\n            const accounts = await window.ethereum.request({\n                method: \"eth_accounts\"\n            });\n            if (accounts.length) {\n                setCurrentAccount(accounts[0]);\n                console.log(\"account   : \" + accounts[0]);\n            } else {\n                setError(\"No Account Found\");\n                setOpenError(true);\n            }\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_6__.ethers.providers.Web3Provider(window.ethereum);\n            const getBalance = await provider.getBalance(accounts[0]);\n            const bal = ethers__WEBPACK_IMPORTED_MODULE_6__.ethers.utils.formatEther(getBalance);\n            setAccountBalance(bal);\n        } catch (error) {\n            setError(\"Something wrong while connecting to wallet\");\n            setOpenError(true);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        checkIfWalletConnected();\n    }, []);\n    //CONNECT WALLET IF USER IS NOT ALREADY CONNECTED \n    const connectWallet = async ()=>{\n        try {\n            if (!window.ethereum) {\n                setError(\"install Metamask\");\n                setOpenError(true);\n            }\n            const accounts = await window.ethereum.request({\n                method: \"eth_requestAccounts\"\n            });\n            setCurrentAccount(accounts[0]);\n            window.location.reload();\n        } catch (error) {\n            console.log(\"error while connecting to wallet\");\n        }\n    };\n    const uploadToIPFS = async (file)=>{\n        try {\n            console.log(\"function triggered\");\n            console.log(projectId, \" \", projectSecretKey);\n            const addedFile = await client.add({\n                content: file\n            });\n            const url = \"\".concat(subdomain, \"/ipfs/\").concat(addedFile.path);\n            console.log(\"file added \" + url);\n            return url;\n        } catch (error) {\n            setError(\"Error Uploading to IPFS\");\n            setOpenError(true);\n        }\n    };\n    const createNFT = async (name, price, backgroundImage, sound, description, router1)=>{\n        console.log(\"function triggered\");\n        if (!name || !description || !price || !backgroundImage || !sound) return setError(\"Some Data Is Missing Please Fill in all Data\"), setOpenError(true);\n        const data = JSON.stringify({\n            name,\n            description,\n            sound,\n            backgroundImage\n        });\n        try {\n            const added = await client.add(data);\n            const url = \"https://infura-ipfs.io/ipfs/\".concat(added.path);\n            await createSale(url, price);\n            router1.push(\"/searchPage\");\n        } catch (error) {\n            console.log(error);\n            setError(\"Error while creating NFT\");\n            setOpenError(true);\n        }\n    };\n    //--- createSale FUNCTION\n    const createSale = async (url, formInputPrice, isReselling, id)=>{\n        try {\n            console.log(url, formInputPrice, isReselling, id);\n            const price = ethers__WEBPACK_IMPORTED_MODULE_6__.ethers.utils.parseUnits(formInputPrice, \"ether\");\n            const contract = await connectWithContract();\n            const listingPrice = await contract.getListingPrice();\n            const transaction = !isReselling ? await contract.createToken(url, price, {\n                value: listingPrice.toString()\n            }) : await contract.resellToken(id, price, {\n                value: listingPrice.toString()\n            });\n            await transaction.wait();\n            console.log(\"transaction \" + transaction.data + \" \" + transaction.value + \"  \" + \" \" + transaction.from + \" \" + \" \" + transaction.hash);\n        } catch (error) {\n            setError(\"error while creating sale\");\n            setOpenError(true);\n            console.log(error);\n        }\n    };\n    //--FETCHNFTS FUNCTION\n    const fetchNFTs = async ()=>{\n        try {\n            if (currentAccount) {\n                const contract = await connectWithContract();\n                const data = await contract.fetchMarketItems();\n                console.log(\"data :   \" + data);\n                const items = await Promise.all(data.map(async (param)=>{\n                    let { tokenId , seller , owner , price: unformattedPrice  } = param;\n                    const tokenURI = await contract.tokenURI(tokenId);\n                    const { data: { backgroundImage , sound , name , description  }  } = await axios__WEBPACK_IMPORTED_MODULE_7__[\"default\"].get(tokenURI);\n                    const price = ethers__WEBPACK_IMPORTED_MODULE_6__.ethers.utils.formatUnits(unformattedPrice.toString(), \"ether\");\n                    return {\n                        price,\n                        tokenId: tokenId.toNumber(),\n                        seller,\n                        owner,\n                        backgroundImage,\n                        sound,\n                        name,\n                        description,\n                        tokenURI\n                    };\n                }));\n                return items;\n            }\n        } catch (error) {\n            setError(\"Error while fetching NFTS\");\n            setOpenError(true);\n            console.log(error);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (currentAccount) {\n            fetchNFTs();\n        }\n    }, []);\n    //--FETCHING MY NFT OR LISTED NFTs\n    const fetchMyNFTsOrListedNFTs = async (type)=>{\n        try {\n            if (currentAccount) {\n                const contract = await connectWithContract();\n                const data = type == \"fetchItemsListed\" ? await contract.fetchItemsListed() : await contract.fetchMyNFTs();\n                console.log(\"data :   \" + data);\n                const items = await Promise.all(data.map(async (param)=>{\n                    let { tokenId , seller , owner , price: unformattedPrice  } = param;\n                    const tokenURI = await contract.tokenURI(tokenId);\n                    console.log(\"token URI \" + tokenURI);\n                    const { data: { backgroundImage , sound , name , description  }  } = await axios__WEBPACK_IMPORTED_MODULE_7__[\"default\"].get(tokenURI);\n                    console.log(\"fetch succesful\");\n                    const price = ethers__WEBPACK_IMPORTED_MODULE_6__.ethers.utils.formatUnits(unformattedPrice.toString(), \"ether\");\n                    return {\n                        price,\n                        tokenId: tokenId.toNumber(),\n                        seller,\n                        owner,\n                        backgroundImage,\n                        sound,\n                        name,\n                        description,\n                        tokenURI\n                    };\n                }));\n                console.log(\"items : \" + items);\n                return items;\n            }\n        } catch (error) {\n            setError(\"Error while fetching listed NFTs\");\n            setOpenError(true);\n            console.log(\"Error: \".concat(error));\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        fetchMyNFTsOrListedNFTs();\n    }, []);\n    //---BUY NFTs FUNCTION\n    const buyNFT = async (nft)=>{\n        try {\n            const contract = await connectWithContract();\n            const price = ethers__WEBPACK_IMPORTED_MODULE_6__.ethers.utils.parseUnits(nft.price.toString(), \"ether\");\n            const transaction = await contract.createMarketSale(nft.tokenId, {\n                value: price\n            });\n            await transaction.wait();\n            router.push(\"/author\");\n        } catch (error) {\n            setError(\"Error While buying NFT\");\n            setOpenError(true);\n        }\n    };\n    const Main = \"Welcome Your Goto place for all things music NFT \\uD83C\\uDFB5\\uD83C\\uDFB5\\uD83C\\uDFB5...\";\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(NFTMarketplaceContext.Provider, {\n        value: {\n            connectWallet,\n            createNFT,\n            fetchNFTs,\n            fetchMyNFTsOrListedNFTs,\n            uploadToIPFS,\n            buyNFT,\n            checkIfWalletConnected,\n            createSale,\n            currentAccount\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\personal\\\\Documents\\\\GRANDIDA\\\\daulat marketplace\\\\front end\\\\Context\\\\SoundexContext.js\",\n        lineNumber: 294,\n        columnNumber: 5\n    }, undefined);\n};\n_s(NFTMarketplaceProvider, \"c9HeC2N5wM3Rvcg1psvutfH4sDk=\");\n_c = NFTMarketplaceProvider;\nvar _c;\n$RefreshReg$(_c, \"NFTMarketplaceProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Context/SoundexContext.js\n"));

/***/ })

});